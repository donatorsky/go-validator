// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator_test.go

// Package validator is a generated GoMock package.
package validator

import (
	context "context"
	reflect "reflect"

	error "github.com/donatorsky/go-validator/error"
	gomock "github.com/golang/mock/gomock"
)

// MockBailingRule is a mock of bailingRule interface.
type MockBailingRule struct {
	ctrl     *gomock.Controller
	recorder *MockBailingRuleMockRecorder
}

// MockBailingRuleMockRecorder is the mock recorder for MockBailingRule.
type MockBailingRuleMockRecorder struct {
	mock *MockBailingRule
}

// NewMockBailingRule creates a new mock instance.
func NewMockBailingRule(ctrl *gomock.Controller) *MockBailingRule {
	mock := &MockBailingRule{ctrl: ctrl}
	mock.recorder = &MockBailingRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBailingRule) EXPECT() *MockBailingRuleMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockBailingRule) Apply(ctx context.Context, value, data any) (any, error.ValidationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, value, data)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error.ValidationError)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockBailingRuleMockRecorder) Apply(ctx, value, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockBailingRule)(nil).Apply), ctx, value, data)
}

// Bails mocks base method.
func (m *MockBailingRule) Bails() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bails")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bails indicates an expected call of Bails.
func (mr *MockBailingRuleMockRecorder) Bails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bails", reflect.TypeOf((*MockBailingRule)(nil).Bails))
}
