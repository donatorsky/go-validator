// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donatorsky/go-validator/rule (interfaces: Rule)

// Package validator is a generated GoMock package.
package validator

import (
	context "context"
	reflect "reflect"

	error "github.com/donatorsky/go-validator/error"
	gomock "github.com/golang/mock/gomock"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockRule) Apply(arg0 context.Context, arg1, arg2 interface{}) (interface{}, error.ValidationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error.ValidationError)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockRuleMockRecorder) Apply(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockRule)(nil).Apply), arg0, arg1, arg2)
}
